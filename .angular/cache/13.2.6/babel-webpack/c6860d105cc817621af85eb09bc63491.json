{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./LoggingService.service\";\nimport * as i2 from \"./data.service\";\nexport let PersonasService = /*#__PURE__*/(() => {\n  class PersonasService {\n    constructor(loggingService, dataServices) {\n      this.loggingService = loggingService;\n      this.dataServices = dataServices;\n      this.personas = [];\n      this.saludar = new EventEmitter();\n    } // Actualizar el arreglo recuperado de la base de datos\n\n\n    setPersonas(personas) {\n      this.personas = personas;\n    }\n\n    obtenerPersonas() {\n      return this.dataServices.cargarPersonas();\n    }\n\n    agregarPersona(persona) {\n      this.loggingService.enviaMensajeAConsola('Agregamos persona: ' + persona.nombre + ' ' + persona.apellido); // Poder agregar información desde la página incluso si no tenemos ninguna información en la base de datos\n\n      if (this.personas == null) {\n        this.personas = [];\n      }\n\n      this.personas.push(persona); // Guardar personas en la base de datos\n\n      this.dataServices.guardarPersonas(this.personas);\n    }\n\n    encontrarPersona(index) {\n      let persona = this.personas[index];\n      return persona;\n    }\n\n    modificarPersona(index, persona) {\n      let persona1 = this.personas[index];\n      persona1.nombre = persona.nombre;\n      persona1.apellido = persona.apellido; // Utilizamos el servicio DataServices para llamar método modificarPersona()\n\n      this.dataServices.modificarPersona(index, persona);\n    }\n\n    eliminarPersona(index) {\n      // Eliminamos el registro del arreglo\n      this.personas.splice(index, 1); // Lo eliminamos de la base de datos\n\n      this.dataServices.eliminarPersona(index); // Volvemos a guardar todo el arreglo en la base de datos para regenerar los índices y así no queden índices vacíos\n\n      this.modificarPersonas();\n    }\n\n    modificarPersonas() {\n      if (this.personas != null) {\n        this.dataServices.guardarPersonas(this.personas);\n      }\n    }\n\n  }\n\n  PersonasService.ɵfac = function PersonasService_Factory(t) {\n    return new (t || PersonasService)(i0.ɵɵinject(i1.LoggingService), i0.ɵɵinject(i2.DataServices));\n  };\n\n  PersonasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PersonasService,\n    factory: PersonasService.ɵfac\n  });\n  return PersonasService;\n})();","map":null,"metadata":{},"sourceType":"module"}