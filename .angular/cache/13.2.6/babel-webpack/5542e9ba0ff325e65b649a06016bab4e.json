{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login/login.service\";\nexport let DataServices = /*#__PURE__*/(() => {\n  class DataServices {\n    constructor(httpClient, loginService) {\n      this.httpClient = httpClient;\n      this.loginService = loginService;\n    } // Regresar la información (arreglo) de la base de datos\n\n\n    cargarPersonas() {\n      // Solicitamos token que nos regresó la autenticación\n      const token = this.loginService.getIdToken(); // Ahora debemos adjuntar el token como un query parameter de la url\n\n      return this.httpClient.get('https://listado-personas-3cae2-default-rtdb.firebaseio.com/datos.json?auth=' + token);\n    } // Guardar información en la base de datos\n\n\n    guardarPersonas(personas) {\n      const token = this.loginService.getIdToken();\n      this.httpClient.put('https://listado-personas-3cae2-default-rtdb.firebaseio.com/datos.json?auth=' + token, personas).subscribe(response => console.log('Resultado de guardar las personas ' + response), error => console.log('Error al guardar personas: ' + error));\n    }\n\n    modificarPersona(index, persona) {\n      const token = this.loginService.getIdToken();\n      let url;\n      url = 'https://listado-personas-3cae2-default-rtdb.firebaseio.com/datos/' + index + '.json?auth=' + token;\n      this.httpClient.put(url, persona).subscribe(response => console.log('Resultado de modificar el objeto persona: ' + response), error => console.log('Error al modificar persona: ' + error));\n    }\n\n    eliminarPersona(index) {\n      const token = this.loginService.getIdToken();\n      let url;\n      url = 'https://listado-personas-3cae2-default-rtdb.firebaseio.com/datos/' + index + '.json?auth=' + token;\n      this.httpClient.delete(url).subscribe(response => console.log('Resultado de eliminar el objeto persona: ' + response), error => console.log('Error al eliminar persona: ' + error));\n    }\n\n  }\n\n  DataServices.ɵfac = function DataServices_Factory(t) {\n    return new (t || DataServices)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n\n  DataServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataServices,\n    factory: DataServices.ɵfac\n  });\n  return DataServices;\n})();","map":null,"metadata":{},"sourceType":"module"}